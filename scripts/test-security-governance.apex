// Test our new security and governance features
System.debug('=== TESTING SECURITY & GOVERNANCE DASHBOARD ===');

try {
    // Test the security governance service
    Map<String, Object> securityAssessment = SecurityGovernanceService.getSecurityAssessment();
    
    System.debug('üîí SECURITY ASSESSMENT RESULTS:');
    System.debug('User ID: ' + securityAssessment.get('userId'));
    System.debug('User Name: ' + securityAssessment.get('userName'));
    System.debug('User Email: ' + securityAssessment.get('userEmail'));
    System.debug('Profile Name: ' + securityAssessment.get('profileName'));
    System.debug('Role Name: ' + securityAssessment.get('roleName'));
    System.debug('Security Score: ' + securityAssessment.get('securityScore') + '/100');
    System.debug('Account Age: ' + securityAssessment.get('accountAge') + ' days');
    System.debug('Is Active: ' + securityAssessment.get('isActive'));
    
    // Test compliance status
    System.debug('\n‚úÖ COMPLIANCE STATUS:');
    System.debug('GDPR Compliant: ' + securityAssessment.get('gdprCompliant'));
    System.debug('SOX Compliant: ' + securityAssessment.get('soxCompliant'));
    System.debug('Data Encrypted: ' + securityAssessment.get('dataEncrypted'));
    System.debug('Audit Trail Enabled: ' + securityAssessment.get('auditTrailEnabled'));
    System.debug('Access Controls Active: ' + securityAssessment.get('accessControlsActive'));
    System.debug('Compliance Score: ' + securityAssessment.get('complianceScore') + '%');
    
    // Test data access analysis
    System.debug('\nüîç DATA ACCESS ANALYSIS:');
    System.debug('Owned Records: ' + securityAssessment.get('ownedRecords'));
    System.debug('Recent Access: ' + securityAssessment.get('recentAccess'));
    System.debug('Data Retention: ' + securityAssessment.get('dataRetention') + ' days');
    
    // Test field access
    Map<String, Object> fieldAccess = (Map<String, Object>)securityAssessment.get('fieldAccess');
    if (fieldAccess != null) {
        System.debug('Total Fields: ' + fieldAccess.get('totalFields'));
        System.debug('Accessible Fields: ' + fieldAccess.get('accessibleFields'));
        System.debug('Editable Fields: ' + fieldAccess.get('editableFields'));
        System.debug('Access Percentage: ' + fieldAccess.get('accessPercentage') + '%');
    }
    
    // Test security recommendations
    System.debug('\nüí° SECURITY RECOMMENDATIONS:');
    List<Object> recommendations = (List<Object>)securityAssessment.get('recommendations');
    for (Object recObj : recommendations) {
        Map<String, Object> rec = (Map<String, Object>)recObj;
        System.debug('‚Ä¢ ' + rec.get('priority') + ': ' + rec.get('title'));
        System.debug('  ' + rec.get('description'));
        System.debug('  Impact: ' + rec.get('impact'));
    }
    
    // Test audit trail summary
    System.debug('\nüìã AUDIT TRAIL SUMMARY:');
    System.debug('Total Audit Entries: ' + securityAssessment.get('totalAuditEntries'));
    System.debug('Recent Entries: ' + securityAssessment.get('recentEntries'));
    System.debug('Critical Events: ' + securityAssessment.get('criticalEvents'));
    System.debug('Last Audit Date: ' + securityAssessment.get('lastAuditDate'));
    System.debug('Audit Retention Days: ' + securityAssessment.get('auditRetentionDays'));
    
    // Test data access validation
    System.debug('\nüîë TESTING DATA ACCESS VALIDATION...');
    List<Job_Application__c> testApps = [SELECT Id FROM Job_Application__c LIMIT 3];
    if (!testApps.isEmpty()) {
        List<Id> testIds = new List<Id>();
        for (Job_Application__c app : testApps) {
            testIds.add(app.Id);
        }
        
        Map<String, Object> validation = SecurityGovernanceService.validateDataAccess(testIds, 'READ');
        System.debug('Validation Results:');
        System.debug('‚Ä¢ Total Records: ' + validation.get('totalRecords'));
        System.debug('‚Ä¢ Accessible Records: ' + validation.get('accessibleRecords'));
        System.debug('‚Ä¢ Restricted Records: ' + validation.get('restrictedRecords'));
        
        List<Object> results = (List<Object>)validation.get('results');
        for (Object resultObj : results) {
            Map<String, Object> result = (Map<String, Object>)resultObj;
            System.debug('  - Record ' + result.get('recordId') + ': ' + 
                        (Boolean)result.get('hasAccess') + ' (' + result.get('accessLevel') + ')');
        }
    }
    
    // Test audit log creation
    System.debug('\nüìä TESTING AUDIT LOG CREATION...');
    Boolean auditSuccess = SecurityGovernanceService.createAuditLog(
        'SECURITY_TEST', 
        null, 
        'Testing security governance features from Apex script'
    );
    System.debug('Audit Log Created: ' + auditSuccess);
    
    // Test compliance reports
    System.debug('\nüìã TESTING COMPLIANCE REPORTS...');
    
    // Test GDPR report
    Map<String, Object> gdprReport = SecurityGovernanceService.getComplianceReport('GDPR');
    System.debug('GDPR Report Generated:');
    System.debug('‚Ä¢ Data Subjects: ' + gdprReport.get('dataSubjects'));
    System.debug('‚Ä¢ Personal Data Fields: ' + gdprReport.get('personalDataFields'));
    System.debug('‚Ä¢ Consent Records: ' + gdprReport.get('consentRecords'));
    System.debug('‚Ä¢ Data Retention Days: ' + gdprReport.get('dataRetentionDays'));
    System.debug('‚Ä¢ Right to Erasure: ' + gdprReport.get('rightToErasure'));
    System.debug('‚Ä¢ Data Portability: ' + gdprReport.get('dataPortability'));
    
    // Test SOX report
    Map<String, Object> soxReport = SecurityGovernanceService.getComplianceReport('SOX');
    System.debug('SOX Report Generated:');
    System.debug('‚Ä¢ Financial Controls: ' + soxReport.get('financialControls'));
    System.debug('‚Ä¢ Audit Trail: ' + soxReport.get('auditTrail'));
    System.debug('‚Ä¢ Segregation of Duties: ' + soxReport.get('segregationOfDuties'));
    System.debug('‚Ä¢ Data Integrity: ' + soxReport.get('dataIntegrity'));
    System.debug('‚Ä¢ Access Controls: ' + soxReport.get('accessControls'));
    
    // Test Security report
    Map<String, Object> securityReport = SecurityGovernanceService.getComplianceReport('SECURITY');
    System.debug('Security Report Generated:');
    System.debug('‚Ä¢ Password Policy: ' + securityReport.get('passwordPolicy'));
    System.debug('‚Ä¢ Session Management: ' + securityReport.get('sessionManagement'));
    System.debug('‚Ä¢ Data Encryption: ' + securityReport.get('dataEncryption'));
    System.debug('‚Ä¢ Access Logging: ' + securityReport.get('accessLogging'));
    System.debug('‚Ä¢ Vulnerabilities: ' + securityReport.get('vulnerabilities'));
    
    System.debug('\n=== SECURITY & GOVERNANCE TEST SUMMARY ===');
    System.debug('‚úÖ Security Assessment: Complete with ' + securityAssessment.size() + ' metrics');
    System.debug('‚úÖ User Security Profile: Analyzed and scored');
    System.debug('‚úÖ Compliance Status: 5 compliance checks performed');
    System.debug('‚úÖ Data Access Analysis: Field-level security validated');
    System.debug('‚úÖ Security Recommendations: ' + recommendations.size() + ' recommendations provided');
    System.debug('‚úÖ Audit Trail: Comprehensive logging and tracking');
    System.debug('‚úÖ Data Access Validation: Record-level permissions checked');
    System.debug('‚úÖ Audit Log Creation: Manual audit entries supported');
    System.debug('‚úÖ Compliance Reports: GDPR, SOX, Security reports generated');
    
    System.debug('\nüéØ SECURITY FEATURES READY:');
    System.debug('‚Ä¢ Real-time security scoring');
    System.debug('‚Ä¢ Comprehensive compliance monitoring');
    System.debug('‚Ä¢ Data access validation and masking');
    System.debug('‚Ä¢ Audit trail management');
    System.debug('‚Ä¢ Security recommendations engine');
    System.debug('‚Ä¢ Multi-standard compliance reporting');
    System.debug('‚Ä¢ Field-level security analysis');
    System.debug('‚Ä¢ User profile security assessment');
    
    System.debug('\nüöÄ WEEK 4 DAY 5: SECURITY & GOVERNANCE - COMPLETE!');
    System.debug('=======================================================');
    
} catch (Exception e) {
    System.debug('‚ùå Error testing security governance: ' + e.getMessage());
    System.debug('Stack trace: ' + e.getStackTraceString());
}
